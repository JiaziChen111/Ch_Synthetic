function S = daily2monthly(dataset_daily,header_daily,S,VarType)
% This function constructs panels of monthly variables of a specified type
% (e.g. LC, LCSYNT, CIPDEV, etc.) for the countries in the structure S.
%
%     INPUT
% double: dataset_daily - daily obs as rows (top-down is first-last obs), col1 has dates
% cell:   header_daily  - names for the columns of dataset_daily
% struct: S             - names of countries and currencies, letter and digit codes
% char:   VarType       - type of variable to extract (e.g. LC, LCSYNT, CIPDEV, etc.)
% char:   fname         - name for the field in which the extracted variables will be saved
% 
%     OUTPUT
% struct: S - includes the time series of the variables of the specified type; when the type is LC
% or LCSYNT, S includes date of first obs, panels of LC yield curves, evolution of tenors available
%
%   ASSUMPTIONS
% dataset_daily and header_daily are generated by read_data.m
% m-files called: end_of_month.m
% 
% Pavel Solís (pavel.solis@gmail.com), May 2019
%%
% Variable type, tenors and field names
fltrTYP  = ismember(header_daily(:,2),VarType);
fltrYCs  = ~startsWith(header_daily(:,3),'I');                          % Exclude IYC tickers
tnrs_all = [0; cellfun(@str2num,header_daily(2:end,5))];
ncntrs   = length(S);
if strcmp(VarType,'LC') || strcmp(VarType,'LCSYNT'); isYCtype = true; else; isYCtype = false; end
if ~isYCtype
    fname = lower(VarType);                                             % Field name for extracted variables
else
    if strcmp(VarType,'LC'); prefix = 'nom'; else; prefix = 'syn'; end
    fnames   = {'startd','data','ntnrsI','ntnrsL','ntnrs','blncd','startb'};
    fnames   = strcat(prefix,fnames);
end

% Construct the database for the variables of the specified type per country
for k  = 1:ncntrs
    % Identify the variables per country
    fltrVAR = ismember(header_daily(:,1),S(k).iso) & fltrTYP;           % Country + variable type
    if strcmp(VarType,'LC') && any(fltrVAR & fltrYCs)                   % Countries with 2 nominal LC YCs
        fltrVAR = fltrVAR & fltrYCs;                                    % Use BFV LC YC
    end
    
    % Available tenors per country
    tnrs = tnrs_all(fltrVAR);                                           % Tenors available
    
    if ~isYCtype
        fltrVAR(1)   = true;                                            % To include dates
        data_var     = dataset_daily(:,fltrVAR);                        % Extract data
        data_var     = end_of_month(data_var);
        S(k).(fname) = [nan tnrs'; data_var];
    else
        % End-of-month data
        idxDates   = sum(~isnan(dataset_daily(:,fltrVAR)),2) > 4;           % Rows with at least 5 observations
        fltrVAR(1) = true;                                                  % To include dates
        data_yc    = dataset_daily(idxDates,fltrVAR);                       % LC data with at least 5 observations
        data_yc    = end_of_month(data_yc);                                 % Keep end-of-month observations
        S(k).(fnames{1}) = datestr(data_yc(1,1),'mmm-yyyy');                % First monthly observation
        S(k).(fnames{2}) = [nan tnrs'; data_yc(:,1) data_yc(:,2:end)/100];	% Yields as decimals
        
        % Tenors with actual data fluctuate between 5 and numel(tnrs)
        nobs  = size(data_yc,1);
        ntnrs = nan(nobs,1);
        for l = 1:nobs
            idxObs   = ~isnan(data_yc(l,2:end));                            % Data points on date l
            ntnrs(l) = sum(idxObs);
            if     l == 1
                S(k).(fnames{3}) = ntnrs(l);
            elseif l == nobs
                S(k).(fnames{4}) = ntnrs(l);
            end
        end
        S(k).(fnames{5}) = ntnrs;
    end
end


%% Construct Balanced Panels for JSZ Estimation
if isYCtype
idxD   = contains(fnames,'data');   idxB   = contains(fnames,'blncd');  % In case order in fnames changes
fnamed = fnames{idxD};              fnameb = fnames{idxB};

if strcmp(VarType,'LC')
    % EMs
    S(1).(fnameb)  = S(1).(fnamed);
    S(2).(fnameb)  = S(2).(fnamed)([1 26:end],:);
    S(3).(fnameb)  = S(3).(fnamed)([1 25:end],:);
    S(4).(fnameb)  = S(4).(fnamed)([1 8:end],1:13);
    S(5).(fnameb)  = S(5).(fnamed);
    S(6).(fnameb)  = S(6).(fnamed)([1 11:end],1:12);
    S(7).(fnameb)  = S(7).(fnamed)([1 16:end],1:14);
    S(8).(fnameb)  = S(8).(fnamed)([1 15:end],:);
    S(9).(fnameb)  = S(9).(fnamed)([1 5:end],1:14);
    S(10).(fnameb) = S(10).(fnamed)([1 19:end],:);
    S(11).(fnameb) = S(11).(fnamed)(:,1:12);
    S(12).(fnameb) = S(12).(fnamed)([1 18:end],:);
    S(13).(fnameb) = S(13).(fnamed)([1 17:end],1:14);
    S(14).(fnameb) = S(14).(fnamed)([1 66:end],:);
    S(15).(fnameb) = S(15).(fnamed);
    
    % AEs
    S(16).(fnameb) = S(16).(fnamed);
    S(17).(fnameb) = S(17).(fnamed);
    S(18).(fnameb) = S(18).(fnamed);
    S(19).(fnameb) = S(19).(fnamed);
    S(20).(fnameb) = S(20).(fnamed);
    S(21).(fnameb) = S(21).(fnamed);
    S(22).(fnameb) = S(22).(fnamed);
    S(23).(fnameb) = S(23).(fnamed);
    S(24).(fnameb) = S(24).(fnamed);
    S(25).(fnameb) = S(25).(fnamed)([1 3:end],:);
else
    % EMs
    S(1).(fnameb)  = S(1).(fnamed)([1 81:end],:);
    S(2).(fnameb)  = S(2).(fnamed)(:,[1:10 13]);
    S(3).(fnameb)  = S(3).(fnamed)(:,[1:9 11 14]);
    S(4).(fnameb)  = S(4).(fnamed)([1 12:end],:);
    S(5).(fnameb)  = S(5).(fnamed)([1 8:end],1:16);
    S(6).(fnameb)  = S(6).(fnamed)([1 27:end],[1:9 11 14]);
    S(7).(fnameb)  = S(7).(fnamed)([1 50:end],1:11);
    S(8).(fnameb)  = S(8).(fnamed)([1 3:end],1:11);
    S(9).(fnameb)  = S(9).(fnamed)([1 10:end],1:11);
    S(10).(fnameb) = S(10).(fnamed);
    S(11).(fnameb) = S(11).(fnamed)([1 3:end],:);
    S(12).(fnameb) = S(12).(fnamed)([1 36:end],:);
    S(13).(fnameb) = S(13).(fnamed)([1 3:end],1:11);
    S(14).(fnameb) = S(14).(fnamed)([1 22:end],:);
    S(15).(fnameb) = S(15).(fnamed)([1 20:end],:);
    
    % AEs
    S(16).(fnameb) = S(16).(fnamed)([1 8:end],[1:11 14]);
    S(17).(fnameb) = S(17).(fnamed)([1 14:end],[1:9 11 14:16]);
    S(18).(fnameb) = S(18).(fnamed)([1 22:end],[1:12 14:16]);
    S(19).(fnameb) = S(19).(fnamed)([1 25:end],[1:12 14:16]);
    S(20).(fnameb) = S(20).(fnamed)([1 24:end],[1:12 14:16 18]);
    S(21).(fnameb) = S(21).(fnamed)([1 25:end],[1:12 14:16 18]);
    S(22).(fnameb) = S(22).(fnamed)(:,1:16);
    S(23).(fnameb) = S(23).(fnamed)([1 33:end],[1:12 14]);
        colsMSS = [5 6 7 9 10 11];
        yldsNOK = S(23).(fnameb)(2:end,2:end);
        yldsNOK(74:81,colsMSS) = repmat(yldsNOK(82,colsMSS),8,1);
    S(23).(fnameb)(2:end,2:end) = yldsNOK;
    S(24).(fnameb) = S(24).(fnamed)([1 35:end],[1:9 11 14:16]);
    S(25).(fnameb) = S(25).(fnamed)([1 33:end],[1:12 14:16]);
end

idxSB   = endsWith(fnames,'b');
fnameSB = fnames{idxSB};
for k  = 1:ncntrs
    S(k).(fnameSB) = datestr(S(k).(fnameb)(2,1),'mmm-yyyy');
end

end
%%
% %% JSZ Estimation per Country
% % 
% N  = 3;
% dt = 1/12;
% ncntrs = length(S);
% corrPC = cell(N,4);
% 
% for k = 1:ncntrs
%     mats   = S(k).(fnameb)(1,2:end);
%     dates  = S(k).(fnameb)(2:end,1);
%     yields = S(k).(fnameb)(2:end,2:end);
%     nobs   = size(yields,1);
%     W  = pcacov(cov(yields));
%     W  = W(:,1:N)';
%     cP = yields*W'; % T*N
%     % [coeff1,score1,~,~,~,mu1] = pca(yields,'algorithm','als'); 
%   reconstrct = score1*coeff1' + repmat(mu1,nobs,1);
%     % W = coeff1;
%     
%     % Fit the curve
%     [llks, AcP, BcP, AX, BX, kinfQ, K0P_cP, K1P_cP, sigma_e, K0Q_cP, K1Q_cP, rho0_cP, rho1_cP, cP, llkP, llkQ,..
% K0Q_X, K1Q_X, rho0_X, rho1_X, Sigma_cP] = ...
%         sample_estimation_fun(W, yields, mats, dt, false);
%     [llk, AcP, BcP, AX, BX, K0Q_cP, K1Q_cP, rho0_cP, rho1_cP, cP, yields_filtered, cP_filtered] = ...
%         jszLLK_KF(yields, W, K1Q_X, kinfQ, Sigma_cP, mats, dt, K0P_cP, K1P_cP, sigma_e);
%     [BcP, AcP, K0Q_cP, K1Q_cP, rho0_cP, rho1_cP, K0Q_X, K1Q_X, AX, BX, Sigma_X] = ...
% jszLoadings(W, K1Q_X, kinfQ, Sigma_cP, mats, dt);
%     yields_kf = ones(length(dates),1)*AcP + (yields*W.')*BcP;
%     
%     % Assess fit
%     [~,PCs]    = pca(yields,'NumComponents',N);
%     [~,PCs_kf] = pca(yields_kf,'NumComponents',N);
%     corrPC{k,1} = S(k).iso; corrPC{k,2} = corr(PCs(:,1),PCs_kf(:,1)); 
%     corrPC{k,3} = corr(PCs(:,2),PCs_kf(:,2)); corrPC{k,4} = corr(PCs(:,3),PCs_kf(:,3));
%     %     plot(dates,[PCs(:,1) PCs_kf(:,1)])              % Compare with yields_filtered and cP_filtered
%     
%     % Term premium
%     [Phi, mu, Hcov] = regressVAR(cP_filtered); % cP, PCs, cP_filtered
% %     mu = K0P_cP; Phi = K1P_cP + eye(N); Hcov = Sigma_cP;
%     Hcov(:,:) = 0;
%     maturities      = round(mats/dt);
%     [Ay,By]         = yld_loadings(maturities,mu,Phi,Hcov,rho0_cP*dt,rho1_cP*dt,dt);
%     yields_exp      = ones(nobs,1)*Ay + cP_filtered*By;
%     
%     tp_synt     = yields_kf - yields_exp;
%     S(k).tpsynt = [nan mats; nan mean(tp_synt); dates tp_synt];
%     
% %     % Cross section
% %     for l = 1:nobs
% %         plot(mats,yields(l,:)','o',mats,yields_kf(l,:)','x',mats,yields_exp(l,:),'+')
% %         title([S(k).ccy '  ' datestr(dates(l))]), ylabel('%'), xlabel('Maturity')
% %         legend('Synthetic','Fitted','Expected')
% %         H(l) = getframe(gcf);
% %     end
% %     % No good fits: BRL, IDR, PEN, PHP
% % 
% %     % Time series
% %     for l = 1:length(mats)
% %         plot(dates,yields(:,l)','o',dates,yields_kf(:,l)','x',dates,yields_exp(:,l),'+')
% %         title([S(k).ccy '  ' num2str(mats(l)) ' YR']), ylabel('%'), xlabel('Maturity')
% %         legend('Synthetic','Fitted','Expected')
% %         H(l) = getframe(gcf);
% %     end
% end
% 
% tpavg = 0;
% for k = 1:15
%     if k == [1 4 9 10]
%         continue
%     end
%     tpavg = tpavg + S(k).tpsynt(2, S(k).tpsynt(1,:) == 10);
% end
% tpavg = tpavg/11;


% For Norway
%     Interpolation using PCs
%     matsNOK  = S(23).(fnameb)(1,2:end);
%     datesNOK = S(23).(fnameb)(2:end,1);
%     nobs = size(yieldsNOK,1);
%     [coeffNOK,scoreNOK,~,~,~,muNOK] = pca(yieldsNOK,'algorithm','als');
%     yieldsALS = scoreNOK*coeffNOK' + repmat(muNOK,nobs,1);
%     sum(yieldsNOK - yieldsALS)
%     for l = 1:nobs
%         plot(matsNOK,yieldsNOK(l,:)','o',matsNOK,yieldsALS(l,:)','x')
%         title([S(23).ccy '  ' datestr(datesNOK(l))]), ylabel('%'), xlabel('Maturity')
%         H(l) = getframe(gcf);
%     end
% 
%     Linear interpolation
%     datesMSS  = datesNOK(74:81);
%     slopeNOK  = (yieldsNOK(82,colsMSS) - yieldsNOK(73,colsMSS))./(datesNOK(82) - datesNOK(73));
%     yieldsMSS = slopeNOK.*(datesMSS - datesNOK(73)) + yieldsNOK(73,colsMSS);
% 
%     for l = 74:81
%         plot(matsNOK,yieldsNOK(l,:)','o',matsNOK,yieldsINT(l,:)','x')
%         title([S(23).ccy '  ' datestr(datesNOK(l))]), ylabel('%'), xlabel('Maturity')
%         H(l) = getframe(gcf);
%     end

%     yields_P = ones(length(dates),1)*A + (yields*W.')*B;
%     yields_P = ones(length(dates),1)*A + cP*B;
%     yields_P = ones(length(dates),1)*A_P + cP*B_P;