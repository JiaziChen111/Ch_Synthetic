%% Deviations from Covered Interest Parity
% This code uses yield curves and forward premiums (FPs) to construct a
% database of covered interest parity (CIP) deviations.
% Assumes that read_usyc.m and fwd_prm.m have already been run and the results
% appended to 'header_daily' and 'dataset_daily' (see read_data.m).
% m-files called: compute_cip_vars.m, remove_NaNcols.m
%
% Pavel Solís (pavel.solis@gmail.com), March 2019
%% Identify Countries with LC and FC
fltrRHO = ismember(header_daily(:,2),'RHO');        % 1 for countries with FP data
fltrFC  = ismember(header_daily(:,2),'USD');        % 1 for countries with FC data
ctrsLC  = unique(header_daily(fltrRHO,1),'stable'); % Countries with LC data
ctrsFC  = unique(header_daily(fltrFC,1),'stable');  % Countries with FC data
ctrs    = {ctrsLC', ctrsFC'};

%% Construct the CIP Database
hdr_cip_vars  = {};                      % No row 1 with titles (i.e. ready to be appended)
data_cip_vars = datenum(TT_daily.Date);  % data_cip_vars = dates; % 'dates' generated by read_bloomberg.m

for k = 1:2                              % 1 for LC, 2 for FC
    countries = ctrs{k};                 % ctrs{1} = ctrsLC, ctrs{2} = ctrsFC
    aux_hdr   = {};    aux_data  = [];   % Temporarily store results
    for l  = 1:numel(countries)          % For all countries with LC or FC
        LC = countries{l};
        [CIPvars,hdr] = compute_cip_vars(LC,k,header_daily,dataset_daily);
        aux_hdr   = [aux_hdr; hdr];      % After each currency, append
        aux_data  = [aux_data, CIPvars];
    end
    hdr_cip_vars  = [hdr_cip_vars; aux_hdr]; % Once LC & FC done for all countries, append
    data_cip_vars = [data_cip_vars, aux_data];
end

[data_cip_vars,hdr_cip_vars] = remove_NaNcols(hdr_cip_vars,data_cip_vars);

%% Report CIP Tenors per Currency
tnrperLCcip = {};                   % Count only after remove_NaNcols.m is called
LoFC = {'CIPDEV','FCSPRD'};
for k = 1:2                         % 1 for LC, 2 for FC
    countries = ctrs{k};            % ctrs{1}=ctrsLC, ctrs{2}=ctrsFC
    for l = 1:numel(countries)      % For all countries with LC or FC
        LC = countries{l};
        ntnrperLC = sum(strcmp(hdr_cip_vars(:,1),LC) & strcmp(hdr_cip_vars(:,2),LoFC{k}));
        tnrperLCcip  = [tnrperLCcip; LC, LoFC(k), ntnrperLC];
    end
end

clear k l LC CIPvars hdr fltr* aux_* ntnrperLC LoFC countries ctrs